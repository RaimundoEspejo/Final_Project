library(readxl)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(tidyr)
library(kableExtra)
library(broom)
library(brms)
library(lme4)
library(emmeans)
library(purrr)
Data_Frame_Allele_Frequency <- read_excel("Data_Frame_Allele_Frequency.xlsx", sheet = "Table")
Data_Frame_Allele_Frequency$success <- Data_Frame_Allele_Frequency$`%AF` # This assigns the values from the %AF column (which represents the proportion of the alternative allele) to a new column called success.Since %AF represents proportions, each entry in success is also a proportion (a decimal between 0 and 1) rather than an integer count.
Data_Frame_Allele_Frequency$total <- 1  # Total column creation. Since %AF is a proportion, total is set to 1 to represent it as a proportion out of 1.
results_trend_test <- Data_Frame_Allele_Frequency %>%
group_by(Position_Genome, `Passage_Substrate`, `Isolate_ID`) %>% # This groups the data by Position_Genome, Passage_Substrate, and Isolate_ID. Each unique combination is treated as an individual group for analysis.
summarise( # Creates a summary for each group considering what is below
test_result = list(
prop.trend.test(success * 100, rep(100, length(success)), score = `Passage_Number`)
)
)
results_trend_test # This table is huge. I need to obtain the important information out of it.
results_trend_test_summary <- results_trend_test %>%
mutate(
p_value = sapply(test_result, function(x) x$p.value),
statistic = sapply(test_result, function(x) x$statistic)
)
results_trend_test_summary # Now the 2 new columns are included. Still a huge table but now I can filter the important results.
results_trend_test_significant <- results_trend_test_summary %>%
filter(p_value <= 0.05)
results_trend_test_significant # Now I have just the 25 significant positions where a trend is present.
results_trend_test_significant$Significant_Trend <- ifelse(results_trend_test_significant$p_value <= 0.05, "Yes", "No")
results_trend_test_significant_clean <- results_trend_test_significant %>%
select(-test_result)
results_trend_test_significant_clean <- results_trend_test_significant_clean %>%
arrange(Position_Genome)
results_trend_test_significant_clean %>%
kable("html", caption = "Trend Test Results for Significant Positions", align = "c") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
row_spec(
which(results_trend_test_significant_clean$`Passage_Substrate` == "Cells"),
background = "#D9EAD3"  # Light green for Cells
) %>%
row_spec(
which(results_trend_test_significant_clean$`Passage_Substrate` == "Eggs"),
background = "#F9CB9C"  # Light orange for Eggs
)
trend_plot_data <- Data_Frame_Allele_Frequency %>%
group_by(Passage_Substrate, Passage_Number) %>%
summarise(
mean_AF = mean(`%AF`, na.rm = TRUE),
sd_AF = sd(`%AF`, na.rm = TRUE),
.groups = "drop"
)
ggplot(trend_plot_data, aes(x = Passage_Number, y = mean_AF, color = Passage_Substrate, group = Passage_Substrate)) +
geom_line(linewidth = 4) +
labs(
title = "Allele Frequency Trends by Passage Substrate",
x = "Passage Number",
y = "Mean Allele Frequency",
color = "Passage Substrate"
) +
scale_x_continuous(breaks = 1:7) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
legend.position = "top"
)
results_trend_test_by_Isolate <- Data_Frame_Allele_Frequency %>%
group_by(Position_Genome, Passage_Substrate, Isolate_ID) %>%
summarise(
test_result = list(
prop.trend.test(success * 100, rep(100, length(success)), score = Passage_Number)
),
.groups = "drop"
)
results_summary_by_Isolate <- results_trend_test_by_Isolate %>%
mutate(
p_value = map_dbl(test_result, ~ .x$p.value),
statistic = map_dbl(test_result, ~ .x$statistic)
)
results_trend_test_significant_by_Isolate <- results_summary_by_Isolate %>%
filter(p_value <= 0.05)
trend_plot_data_by_Isolate <- Data_Frame_Allele_Frequency %>%
group_by(Isolate_ID, Passage_Substrate, Passage_Number) %>%
summarise(
mean_AF = mean(`%AF`, na.rm = TRUE),
sd_AF = sd(`%AF`, na.rm = TRUE),
.groups = "drop"
)
ggplot(trend_plot_data_by_Isolate, aes(x = Passage_Number, y = mean_AF, color = Passage_Substrate, group = Passage_Substrate)) +
geom_line(size = 3) +
facet_wrap(~Isolate_ID) +
labs(
title = "Allele Frequency Trends by Isolate and Passage Substrate",
x = "Passage Number",
y = "Mean Allele Frequency",
color = "Passage Substrate"
) +
scale_x_continuous(breaks = 1:7) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
legend.position = "top"
)
Data_Frame_Allele_Frequency$success <- Data_Frame_Allele_Frequency$`%AF`  # Proportion of alternative allele
Data_Frame_Allele_Frequency$failure <- 1 - Data_Frame_Allele_Frequency$success  # Proportion of reference allele
Data_Frame_Allele_Frequency$`Passage_Substrate` <- as.factor(Data_Frame_Allele_Frequency$`Passage_Substrate`)
logistic_model <- glm(cbind(success, failure) ~ `Passage_Number` * `Passage_Substrate`,
data = Data_Frame_Allele_Frequency,
family = quasibinomial)
summary(logistic_model) # View summary of the quasibinomial model. The summary(logistic_model) output will show me the coefficients for "Passage Number" and "Passage Substrate" as well as their interaction.
tidy_logistic_model <- broom::tidy(logistic_model)
tidy_logistic_model <- tidy_logistic_model %>%
mutate(Significance = case_when(
p.value < 0.001 ~ "***",
p.value < 0.01 ~ "**",
p.value < 0.05 ~ "*",
TRUE ~ ""
))
tidy_logistic_model <- tidy_logistic_model %>%
mutate(Interpretation = case_when(
term == "(Intercept)" ~ "Baseline log-odds of success (%AF) in cells at passage 0. Significant at p<0.05",
term == "Passage_Number" ~ "Passage number has a significant positive effect. For each additional passage, the odds of success (alternative allele presence) increase by about 43%.",
term == "Passage_SubstrateEggs" ~ "Switching from Cells to Eggs significantly increases the odds of success by approximately 62.8% (exp(0.48751)).",
term == "Passage_Number:Passage_SubstrateEggs" ~ "The interaction term is significant. The positive effect of passage number on success is weaker in eggs compared to cells.",
TRUE ~ "N/A"
))
tidy_logistic_model %>%
select(term, estimate, std.error, statistic, p.value, Significance, Interpretation) %>%
kable("html", caption = "Logistic Regression Model Coefficients with Interpretation", align = "c") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F)
Data_Frame_Allele_Frequency$predicted_AF <- predict(logistic_model, type = "response")
Data_Frame_Allele_Frequency$successAF <- as.integer(round(100*Data_Frame_Allele_Frequency$Allele_Frequency, 0))
Data_Frame_Allele_Frequency$trialsAF <- 100
ggplot(Data_Frame_Allele_Frequency, aes(x = `Passage_Number`, y = success, color = `Passage_Substrate`)) +
geom_line(aes(y = predicted_AF), size = 3) +  # Increased line thickness
scale_x_continuous(breaks = seq(min(Data_Frame_Allele_Frequency$Passage_Number),
max(Data_Frame_Allele_Frequency$Passage_Number), by = 1)) +  # X-axis with steps of 1
labs(title = "Observed vs Predicted Alternative Allele Frequency Over Passages",  # Add a title
y = "Alternative Allele Frequency",
x = "Passage Number") +
theme_minimal()
get_logistic_results <- function(data) {
glm(cbind(success, total - success) ~ `Passage_Number`, data = data, family = quasibinomial)
}
cells_data <- Data_Frame_Allele_Frequency %>%
filter(`Passage_Substrate` == "Cells")
eggs_data <- Data_Frame_Allele_Frequency %>%
filter(`Passage_Substrate` == "Eggs")
cells_results <- get_logistic_results(cells_data)
eggs_results <- get_logistic_results(eggs_data)
summary(cells_results)
summary(eggs_results)
Data_Frame_Allele_Frequency <- Data_Frame_Allele_Frequency %>%
mutate(success_counts = round(success * 100),  # Convert success to integer counts
failure_counts = round(failure * 100))  # Convert failure to integer counts
glmm_model_by_Isolate <- glmer(
cbind(success_counts, failure_counts) ~ `Passage_Number` * `Passage_Substrate` + (1 | Isolate_ID),
data = Data_Frame_Allele_Frequency,
family = binomial(link = "logit")
)
summary(glmm_model_by_Isolate) # View the summary of the GLMM model
Data_Frame_Allele_Frequency$predicted_AF_by_Isolate <- predict(glmm_model_by_Isolate, type = "response")
ggplot(Data_Frame_Allele_Frequency, aes(x = `Passage_Number`, y = success, color = `Passage_Substrate`)) +
geom_line(aes(y = predicted_AF_by_Isolate), size = 1.5) +  # Predicted trends
facet_wrap(~Isolate_ID) +  # Create separate panels for each isolate
scale_x_continuous(breaks = seq(min(Data_Frame_Allele_Frequency$Passage_Number),
max(Data_Frame_Allele_Frequency$Passage_Number), by = 1)) +  # X-axis for all passages
labs(title = "Observed vs Predicted Alternative Allele Frequency Over Passages by Isolate",
y = "Alternative Allele Frequency",
x = "Passage Number") +
theme_minimal()
get_brms_results <- function(data) {
brm(
successAF | trials(trialsAF) ~ Viral_Load_SQ * Passage_Number,
data = data,
family = binomial())
}
cells_results_bayesian <- get_brms_results(cells_data)
cells_results_bayesian <- get_brms_results(cells_data)
summary(cells_results_bayesian)
plot(cells_results_bayesian)
get_brms_results <- function(data) {
brm(
successAF | trials(trialsAF) ~ Viral_Load_SQ * Passage_Number,
data = data,
family = binomial())
}
cells_results_bayesian <- get_brms_results(cells_data)
get_brms_results <- function(data) {
brm(
successAF | trials(trialsAF) ~ Viral_Load_SQ * Passage_Number,
data = data,
family = binomial())
}
cells_results_bayesian <- get_brms_results(cells_data)
diff <- post_cells$b_Passage_Number - post_eggs$b_Passage_Number
get_brms_results_by_isolate <- function(data) {
brm(
successAF | trials(trialsAF) ~ Viral_Load_SQ * Passage_Number,
data = data,
family = binomial(),
seed = 347,
iter = 10000
)
}
bayesian_models_by_isolate <- Data_Frame_Allele_Frequency %>%
group_by(Isolate_ID, Passage_Substrate) %>%
group_map(~ get_brms_results_by_isolate(.x), .keep = TRUE)
viral_linear_mixed_model <- lmer(Viral_Load_SQ ~ `Passage_Number` * `%AF` * `Passage_Substrate` +
(1 | Isolate_ID), data = Data_Frame_Allele_Frequency)
summary(viral_linear_mixed_model) # Summary of the linear mixed model
posthoc_results <- emmeans(viral_linear_mixed_model, ~ Passage_Number | `%AF` * `Passage_Substrate`)
summary(posthoc_results) # Summary of the post hoc analysis
ggplot(Data_Frame_Allele_Frequency, aes(x = `Passage_Number`, y = Viral_Load_SQ, color = `%AF`)) +
geom_line(size = 1.2) +  # Line varies by color
geom_point(size = 2) +   # Points with color gradient
facet_grid(Passage_Substrate ~ Isolate_ID) +  # Separate panels for Substrate and Isolate
scale_color_gradient(low = "blue", high = "red") +  # Gradient color for %AF
labs(
title = "Viral Load over Passages by Allele Frequency and Substrate",
x = "Passage Number",
y = "Viral Load (Log Scale)",
color = "Allele Frequency (%)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "top"
)
Data_Frame_Allele_Frequency_long <- Data_Frame_Allele_Frequency %>%
pivot_longer(
cols = c(Viral_Load_SQ, Allele_Frequency),
names_to = "Variable",
values_to = "Value"
) %>%
mutate(
Value = ifelse(Variable == "Allele_Frequency", Value * 12, Value),
Variable = recode(Variable, "Viral_Load_SQ" = "Viral Load", "Allele_Frequency" = "Allele Frequency")
)
ggplot(Data_Frame_Allele_Frequency_long, aes(x = `Passage_Number`, y = Value, color = Variable)) +
geom_smooth(aes(group = Variable), size = 2, method = "lm", formula = y ~ splines::bs(x, 3), se = F) +
scale_y_continuous(
name = "Viral Load",
sec.axis = sec_axis(~ . * (1 / 12), name = "Allele Frequency (%)")
) +
facet_grid(Passage_Substrate ~ Isolate_ID) +
labs(
title = "Trends in Viral Load and Allele Frequency Across Passages",
x = "Passage Number"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14),
legend.title = element_blank(),  # Removes the legend title
legend.position = "top"
)
ggplot(Data_Frame_Allele_Frequency, aes(x = `Passage_Number`, y = Viral_Load_SQ, color = `%AF`)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
facet_wrap(~Passage_Substrate) +  # Panel per substrate
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Viral Load over Passages by Continuous Allele Frequency (by Substrate)",
x = "Passage Number",
y = "Viral Load (Log Scale)",
color = "Allele Frequency (%)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
